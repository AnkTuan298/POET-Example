@page
@model RegisterConfirmationModel
@{
    ViewData["Title"] = "Register confirmation";
}

<nav class="navbar navbar-expand-lg lp-nav bg-white shadow-sm sticky-top py-3">
    <div class="container-xxl px-4">
        <a class="navbar-brand d-inline-flex align-items-center"
           asp-controller="Home" asp-action="Index" aria-label="POET Home">
            <img src="@Url.Content("~/LOGO/POETLOGO.png")"
                 alt="POET"
                 class="brand-logo" />
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navLinks" aria-controls="navLinks" aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-end" id="navLinks">
            <ul class="navbar-nav gap-3">
                <li class="nav-item">
                    <a class="btn btn-sm btn-outline-secondary px-3 fw-semibold"
                       asp-page="/Account/Login">Login</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="auth-wrap d-flex align-items-center justify-content-center">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-12 col-md-8 col-lg-6 col-xxl-5">
                <div class="card shadow-lg border-0 rounded-4">
                    <div class="card-body p-4 p-md-5">

                        <div class="text-center mb-4">
                            <div class="brand-bubble mb-3">
                                <i class="bi bi-envelope-check-fill"></i>
                            </div>
                            <h1 class="h4 fw-bold mb-1 text-slate-900">Check your email</h1>
                            <p class="text-muted mb-0">
                                Your account was created successfully. We’ve sent a confirmation link to your inbox.
                            </p>
                        </div>

                        <div class="alert alert-info small" role="alert">
                            If you don’t see the email, check your spam or promotions folder.
                        </div>

                        <div id="resendStatus" class="small text-muted mb-2"></div>

                        <div class="d-grid gap-2">
                            <a class="btn btn-primary btn-lg fw-semibold" asp-page="/Account/Login">
                                Back to Login
                            </a>

                            <form id="resendForm" method="post" asp-page-handler="Resend" class="d-none">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="Email" value="@Model.Email" />
                            </form>

                            <button id="btnResend" type="button"
                                    class="btn btn-outline-secondary fw-semibold position-relative">
                                Resend confirmation email
                                <span id="resendCountdown" class="ms-2 small text-muted d-none">(60s)</span>
                            </button>
                        </div>

                        <p class="text-center text-muted small mt-3 mb-0">
                            To avoid abuse, resending is limited to once per minute.
                        </p>

                    </div>
                </div>

                <p class="text-center text-muted small mt-4 mb-0">
                    © 2025 POET. Professional Online Education Technology.
                </p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const KEY_PREFIX = 'poet_resend_until:';
            const EMAIL = '@(Model.Email ?? "")';
            const KEY = KEY_PREFIX + EMAIL.toLowerCase();
            const COOLDOWN_MS = 60 * 1000;

            const btn = document.getElementById('btnResend');
            const cd = document.getElementById('resendCountdown');
            const statusBox = document.getElementById('resendStatus');
            const form = document.getElementById('resendForm');

            if (!btn || !cd || !form) return;

            function setDisabled(disabled) {
                if (disabled) {
                    btn.classList.add('disabled');
                    btn.setAttribute('aria-disabled', 'true');
                    cd.classList.remove('d-none');
                } else {
                    btn.classList.remove('disabled');
                    btn.removeAttribute('aria-disabled');
                    cd.classList.add('d-none');
                    cd.textContent = '';
                }
            }

            function showMsg(msg, ok) {
                statusBox.textContent = msg || '';
                statusBox.classList.toggle('text-success', !!ok);
                statusBox.classList.toggle('text-danger', !ok);
            }

            function tick() {
                const until = parseInt(localStorage.getItem(KEY) || '0', 10);
                const now = Date.now();
                const remain = until - now;

                if (remain > 0) {
                    setDisabled(true);
                    const s = Math.ceil(remain / 1000);
                    cd.textContent = `(${s}s)`;
                    requestAnimationFrame(() => setTimeout(tick, 200));
                } else {
                    setDisabled(false);
                }
            }

            async function resendAjax() {
                const until = parseInt(localStorage.getItem(KEY) || '0', 10);
                if (until > Date.now()) return;

                const fd = new FormData(form);
                try {
                    const res = await fetch(form.action, {
                        method: 'POST',
                        body: fd,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });
                    const data = await res.json().catch(() => ({}));
                    if (res.ok && data?.ok) {
                        showMsg(data.message || 'Confirmation email sent.', true);
                        localStorage.setItem(KEY, String(Date.now() + COOLDOWN_MS));
                        tick();
                    } else {
                        showMsg(data?.message || 'Unable to resend right now.', false);
                        if (res.status === 429) {
                            localStorage.setItem(KEY, String(Date.now() + COOLDOWN_MS));
                            tick();
                        }
                    }
                } catch {
                    showMsg('Network error. Please try again in a moment.', false);
                }
            }

            btn.addEventListener('click', function () {
                const until = parseInt(localStorage.getItem(KEY) || '0', 10);
                if (until > Date.now()) return; 
                resendAjax();
            });

            tick();
        })();
    </script>
}
